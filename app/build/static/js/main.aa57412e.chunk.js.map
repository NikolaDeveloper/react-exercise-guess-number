{"version":3,"sources":["components/Menu.js","components/Start.js","App.js","reportWebVitals.js","index.js"],"names":["Menu","data","setData","className","onSubmit","e","preventDefault","isFinite","number","alert","gameState","tries","type","placeholder","onChange","num","parseFloat","target","value","bind","numbers","Start","chooseTile","tile","indexOf","rnd","Math","floor","random","length","innerHTML","splice","setTimeout","reset","try_label","Array","from","keys","map","i","onClick","App","useState","result","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa57412e.chunk.js","sourcesContent":["const Menu = ({ data, setData }) => {\n    const updateNumber = (e) => {\n        let num = parseFloat(e.target.value);\n        if(!isFinite(num) || num < 1 || num > 9) {\n            alert('Number must be from 1 to 9.');\n            return;\n        }\n        setData({...data, number: num})\n    }\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        if(!isFinite(data.number) || data.number < 1 || data.number > 9) {\n            alert('Number must be from 1 to 9.');\n            return;\n        }\n        setData({...data, \n            gameState: 'started',\n            tries: 0\n        })\n    }\n    return (\n        <div className=\"game-screen game-menu\">\n            <p>\n                Pick a number from 1-9 and then guess where it's hidden.\n            </p>\n            <form onSubmit={onSubmit}>\n                <input type=\"number\" placeholder=\"Number from 1-9\" onChange={updateNumber.bind(this)} value={data.number} />\n                <button type=\"submit\">START GAME</button>\n            </form>\n        </div>\n    );\n}\n\nexport default Menu;\n","\nvar numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nconst Start = ({ data, setData }) => {\n    var tries = data.tries;\n\n    const chooseTile = (e) => {\n        if(data.tries >= 3)\n            return;\n\n        let tile = e.target;\n        if(tile.className.indexOf('picked') !== -1)\n            return;\n        \n        tries = data.tries + 1;\n\n        let rnd = Math.floor(Math.random() * (numbers.length - 1));\n        tile.innerHTML = numbers[rnd];\n\n        if(numbers[rnd] === data.number) {\n            tile.className += \" correct picked\";\n            let try_label = tries === 1 ? 'try' : 'tries';\n            setTimeout(() => {\n                alert(`Congrats! You found your number in ${tries} ${try_label}.`);\n                reset();\n            }, 10)\n            return;\n        }\n\n        numbers.splice(rnd, 1);\n        //console.log(numbers[rnd], rnd, numbers, numbers.length);\n\n        tile.className += \" wrong picked\";\n        setData({...data, tries: tries});\n        if(tries >= 3) {\n            setTimeout(() => {\n                alert('You failed :(');\n                reset();\n            }, 10)\n        }\n    }\n    const reset = () => {\n        numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n        setData({...data, number: '', tries: 0, gameState: 'menu'})\n    }\n\n    const try_label = 3 - tries === 1 ? 'try' : 'tries'\n    return (\n        <div className=\"game-screen game-start\">\n            <p>\n                Find your number ;) You've got {3 - tries} {try_label} left.\n            </p>\n            <div className=\"tiles\">\n            {Array.from(Array(9).keys()).map((i) => {\n                return (<div onClick={chooseTile.bind(this)} className=\"tile\"></div>)\n            })}\n            </div>\n        </div>\n    );\n}\n\nexport default Start;\n","import { useState } from 'react'\nimport './App.css';\nimport Menu from './components/Menu'\nimport Start from './components/Start'\n\nconst App = () => {\n\n  const [data, setData] = useState({\n    gameState: 'menu',\n    number: '',\n    tries: 0,\n    result: false\n  });\n\n  return (\n    <div className=\"App\">\n        {data.gameState === 'menu' && <Menu data={data} setData={setData} />}\n        {data.gameState === 'started' && <Start data={data} setData={setData} />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}